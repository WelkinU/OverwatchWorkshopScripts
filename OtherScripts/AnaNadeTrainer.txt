settings
{
	main
	{
		Description: "Learn Ana set-nade spots on Eichenwalde, Route66, Anubis, Hanamura, Dorado, Hollywood, Blz World, Kings Row, Nepal, JTown, Volskaya. Code 2Y555. Created by WelkinTern. Last Update Aug 21, 2021. Code also here: https://github.com/WelkinU/OverwatchWorkshopScripts/blob/master/OtherScripts/AnaNadeTrainer.txt"
	}

	lobby
	{
		Max Team 1 Players: 0
		Max Team 2 Players: 12
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Blizzard World
				Dorado
				Eichenwalde
				Hanamura
				Hollywood
				Junkertown
				King's Row
				Nepal
				Route 66
				Temple of Anubis
				Volskaya Industries
			}
		}

		General
		{
			Hero Limit: Off
			Kill Cam: Off
			Kill Feed: Off
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 0%
			No Ammunition Requirement: On
			Ultimate Generation: 10%
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 0%

			enabled heroes
			{
				Ana
			}
		}
	}
}

variables
{
	global:
		0: CPLocation
		1: CPDestination
		2: CPFacing
		3: CPHintText
		4: CPHintEffectPosition
		5: CPScoped
		6: CPObjectiveText
		13: DevModeEngaged
		15: PioneerMode

	player:
		0: CP
		1: ChaseCamOn
		5: StartPos
		6: StartVelocity
		7: NadeTimerChase
		8: TimerChaseRate
		10: AnaSleepDartTeleLocation
		11: Destination
		12: ScopedThrow
}

subroutines
{
	0: RespawnPlayer
}

rule("Initialize Globals and HUD")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Pause Match Time;
		Disable Game Mode HUD(All Players(All Teams));
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(
			"Ana Nade Trainer By WelkinTern | Code 2Y555\r\nMaps: Eich, Route66, Anubis, Hana, Dorado,\r\n{0}\r\n\r\n", Custom String(
			"      Holly, Blz World, King's Row, Nepal,\r\n      JTown, Volskaya")), Left, -1, Color(White), Color(White), Color(Green),
			Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(
			"- - - - - - - - - Controls - - - - - - - - - \r\n{0}      | Reset Camera + Position\r\n{1}\r\n{2}", Input Binding String(
			Button(Reload)), Custom String("{0} + {1} | Next Checkpoint\r\n{2}    | Reset Camera Only", Input Binding String(Button(
			Interact)), Input Binding String(Button(Jump)), Input Binding String(Button(Melee))), Custom String(
			"{0}    | Teleport (Like Ana Parkour)\r\n{1}", Ability Icon String(Hero(Ana), Button(Ability 1)), Custom String(
			"{0} + {1} | Toggle Chase Cam", Input Binding String(Button(Melee)), Input Binding String(Button(Ultimate))))), Left, 0, Color(
			White), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(
			"- - - - - - - - - - - - - - - - - - -\r\nUlt Status | Set Throw Destination\r\n{0} + {1} | Calculate Throw Angle To Destination",
			Input Binding String(Button(Interact)), Input Binding String(Button(Ultimate))), Left, 1, Color(White), Color(White), Color(
			Orange), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Host Player, Global.DevModeEngaged), Null, Null, Custom String(
			"- - - - - - - Dev Mode Controls - - - - - - -\r\n{0}\r\n\r\n\r\n", Custom String(
			"Need Healing - Pioneer Mode Engaged\r\nEmote + Melee - Delete Last CP\r\nGroup Up - Set Hint Orb Location")), Left, 8, Color(
			White), Color(White), Color(Red), Visible To, Default Visibility);
		Create HUD Text(Filtered Array(Host Player, Global.DevModeEngaged), Null, Null, Custom String("Position: {0}\r\n{1}\r\n{2}",
			Position Of(Local Player), Custom String("Facing Vector: {0}\r\nFacing Angles: H{1}, V{2}", Facing Direction Of(Local Player),
			Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(
			Local Player))), Custom String("Ray Cast: {0}\r\nCollision Position: {1}", Ray Cast Hit Position(Eye Position(Local Player),
			Eye Position(Local Player) + 180 * Facing Direction Of(Local Player), Null, Null, False),
			Local Player.StartPos + Local Player.StartVelocity * Local Player.NadeTimerChase + Vector(0, -4.900, 0)
			* Local Player.NadeTimerChase * Local Player.NadeTimerChase)), Right, 9, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Null, Null, Custom String("Server Load {0} | Avg {1} | Peak {2}", Server Load, Server Load Average,
			Server Load Peak), Right, -1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Checkpoint {0} / {1}\r\nFly Time: {2}", Local Player.CP,
			Count Of(Global.CPLocation) - 1, Local Player.NadeTimerChase), Right, 5, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TimerChaseRate != 1), Null, Null, Custom String(
			"Timer Chase Rate: {0}", Local Player.TimerChaseRate), Right, 6, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		"Give map data a time to load"
		Wait(0.100, Ignore Condition);
		"If no map data for this map, initialize CP vars as empty arrays"
		If(Count Of(Global.CPLocation) == 0);
			Global.CPLocation = Empty Array;
			Global.CPDestination = Empty Array;
			Global.CPFacing = Empty Array;
			Global.CPHintText = Empty Array;
			Global.CPHintEffectPosition = Empty Array;
			Global.CPScoped = Empty Array;
			Global.CPObjectiveText = Empty Array;
		End;
		Global.DevModeEngaged = False;
		Global.PioneerMode = False;
	}
}

rule("Initialize Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Disable Game Mode HUD(Event Player);
		Event Player.ChaseCamOn = True;
		Event Player.Destination = Null;
		Event Player.CP = 0;
		"Orb tracking projectile position"
		Create Effect(Filtered Array(Event Player, Current Array Element.NadeTimerChase > 0), Sphere, Color(Red),
			Event Player.StartPos + Event Player.StartVelocity * Event Player.NadeTimerChase + Vector(0, -4.900, 0)
			* Event Player.NadeTimerChase * Event Player.NadeTimerChase, 1, Visible To Position and Radius);
		"Create Ring Effects"
		Create Effect(Event Player, Ring, Color(White), Global.CPLocation[Event Player.CP], 2, Visible To Position and Radius);
		Create Effect(Event Player, Ring, Color(White), Global.CPDestination[Event Player.CP], 4, Visible To Position and Radius);
		"Objective and Hint Text"
		Create HUD Text(Event Player, Custom String("Objective: {0}\r\nAim Hint: {1}", Global.CPObjectiveText[Event Player.CP],
			Global.CPHintText[Event Player.CP]), Null, Null, Top, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		"Hint Orb"
		Create Effect(Event Player, Sphere, Custom Color(128 + 127 * Cosine From Degrees(Total Time Elapsed * 100),
			128 + 127 * Cosine From Degrees(120 + Total Time Elapsed * 100), 128 + 127 * Cosine From Degrees(
			240 + Total Time Elapsed * 100), 255), Global.CPHintEffectPosition[Event Player.CP], Distance Between(
			Global.CPLocation[Event Player.CP], Global.CPHintEffectPosition[Event Player.CP]) * Sine From Degrees(1),
			Visible To Position Radius and Color);
		"Flag icon for destination"
		Create Icon(Filtered Array(Event Player, Event Player.Destination != Null), Event Player.Destination, Flag,
			Visible To and Position, Color(Yellow), False);
		Set Status(Event Player, Null, Phased Out, 9999);
		Create Effect(Filtered Array(Event Player, Event Player.Destination != Null), Ring, Color(Purple), Event Player.Destination, 4,
			Visible To Position and Radius);
		Event Player.ScopedThrow = False;
		Event Player.TimerChaseRate = 1;
	}
}

disabled rule("Game Framework")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Teleport player at first cp when they spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Count Of(Global.CPLocation) > 0;
	}

	actions
	{
		Call Subroutine(RespawnPlayer);
	}
}

rule("Respawn Player on CP if they die")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Respawn(Event Player);
		Wait(0.100, Ignore Condition);
		Call Subroutine(RespawnPlayer);
	}
}

disabled rule("Trajectory And Camera Stuff")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Throw Nade")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Stop Camera(Event Player);
		Event Player.NadeTimerChase = 0;
		Chase Player Variable At Rate(Event Player, NadeTimerChase, 10, Event Player.TimerChaseRate, Destination and Rate);
		"should this be eye position?"
		Event Player.StartPos = Eye Position(Event Player);
		Event Player.StartVelocity = 30 * Facing Direction Of(Event Player);
		If(Angle Between Vectors(Facing Direction Of(Event Player), Up) < 0.100);
			Event Player.StartVelocity = Vector(0, 30, 0);
		End;
		If(Event Player.ChaseCamOn);
			Start Camera(Event Player, Event Player.StartPos + Event Player.StartVelocity * Event Player.NadeTimerChase + Vector(0, -4.900, 0)
				* Event Player.NadeTimerChase * Event Player.NadeTimerChase + -8 * Vector(X Component Of(Facing Direction Of(Event Player)),
				-1 * Absolute Value(Y Component Of(Facing Direction Of(Event Player))), Z Component Of(Facing Direction Of(Event Player))),
				Event Player.StartPos + Event Player.StartVelocity * Event Player.NadeTimerChase + Vector(0, -4.900, 0)
				* Event Player.NadeTimerChase * Event Player.NadeTimerChase, 30);
		End;
	}
}

rule("Detect Nade Collision")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player.StartPos + Event Player.StartVelocity * Event Player.NadeTimerChase + Vector(0, -4.900, 0)
			* Event Player.NadeTimerChase * Event Player.NadeTimerChase, Ray Cast Hit Position(
			Event Player.StartPos + Event Player.StartVelocity * Event Player.NadeTimerChase + Vector(0, -4.900, 0)
			* Event Player.NadeTimerChase * Event Player.NadeTimerChase,
			Event Player.StartPos + Event Player.StartVelocity * Event Player.NadeTimerChase + Vector(0, -4.900, 0)
			* Event Player.NadeTimerChase * Event Player.NadeTimerChase + Normalize(
			Event Player.StartVelocity + Event Player.NadeTimerChase * Vector(0, -9.800, 0)), All Players(All Teams), Event Player, True))
			< 0.990;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, NadeTimerChase);
		Small Message(Event Player, Custom String("Fly Time: {0} sec. {1}", Event Player.NadeTimerChase, Custom String(
			"{0} to reset view. {1} + {2} to go to next checkpoint.", Input Binding String(Button(Reload)), Input Binding String(Button(
			Interact)), Input Binding String(Button(Jump)))));
		Wait(1, Ignore Condition);
		Stop Camera(Event Player);
		"Handle pioneer mode stuff"
		If(Global.PioneerMode && Event Player == Host Player);
			Modify Global Variable(CPLocation, Append To Array, Position Of(Event Player));
			Modify Global Variable(CPDestination, Append To Array,
				Event Player.StartPos + Event Player.StartVelocity * Event Player.NadeTimerChase + Vector(0, -4.900, 0)
				* Event Player.NadeTimerChase * Event Player.NadeTimerChase);
			Modify Global Variable(CPFacing, Append To Array, Vector(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
				Vertical Angle From Direction(Facing Direction Of(Event Player)), 0));
			Modify Global Variable(CPHintText, Append To Array, Custom String(""));
			Modify Global Variable(CPObjectiveText, Append To Array, Custom String(""));
			Modify Global Variable(CPHintEffectPosition, Append To Array, Null);
			Modify Global Variable(CPScoped, Append To Array, Event Player.ScopedThrow);
			Global.PioneerMode = False;
			Small Message(Host Player, Custom String("New CP added to map data. Pioneer mode now turned off."));
			Enable Inspector Recording;
			Log To Inspector(Custom String("Pioneer CP {0}", Count Of(Global.CPLocation)));
			Disable Inspector Recording;
		End;
	}
}

disabled rule("Key Bindings")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Reload - Reset Camera + Position, Melee = Reset Camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.NadeTimerChase > 9 || Is Button Held(Event Player, Button(Reload)) || Is Button Held(Event Player, Button(Melee)))
			== True;
		Is Button Held(Event Player, Button(Interact)) != True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, NadeTimerChase);
		Stop Camera(Event Player);
		If(!Is Button Held(Event Player, Button(Melee)));
			Call Subroutine(RespawnPlayer);
		End;
	}
}

rule("Interact + Jump - Goto Next CP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Event Player.CP = (Event Player.CP + 1) % Count Of(Global.CPLocation);
		Call Subroutine(RespawnPlayer);
	}
}

rule("Melee + Ultimate - Toggle Chase Cam")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Event Player.ChaseCamOn = !Event Player.ChaseCamOn;
		Small Message(Event Player, Event Player.ChaseCamOn ? Custom String("Chase Cam On") : Custom String("Chase Cam Off"));
	}
}

rule("Interact + W or S - Change timer chase rate up or down")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Absolute Value(Z Component Of(Throttle Of(Event Player))) == 1;
	}

	actions
	{
		If(Z Component Of(Throttle Of(Event Player)) > 0);
			Event Player.TimerChaseRate += 0.500;
		Else;
			Event Player.TimerChaseRate -= 0.250;
		End;
	}
}

rule("Ana Sleep Dart Teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Stop Camera(Event Player);
		"The duration before Ana fires sleep dart"
		Wait(0.300, Ignore Condition);
		Event Player.AnaSleepDartTeleLocation = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 80, All Players(All Teams), Event Player, True);
		"Shorten ray cast to avoid unintended tele through surfaces"
		Event Player.AnaSleepDartTeleLocation -= Direction Towards(Eye Position(Event Player), Event Player.AnaSleepDartTeleLocation)
			* 0.500;
		"Sleep dart travel time"
		Wait(Distance Between(Eye Position(Event Player), Event Player.AnaSleepDartTeleLocation) / 60, Ignore Condition);
		Teleport(Event Player, Event Player.AnaSleepDartTeleLocation);
	}
}

disabled rule("Find Angles from Start and Destination Positions")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Ultimate Status - Set Destination point")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
	}

	actions
	{
		Event Player.Destination = Position Of(Event Player);
		Small Message(Event Player, Custom String("Destination Point Set: {0}", Position Of(Event Player)));
	}
}

rule("Interact + Ultimate - Determine angle to destination point - THANKS https://www.youtube.com/watch?v=bqYtNrhdDAY")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		"horizontal distance"
		Event Player.ScopedThrow = Distance Between(Event Player.Destination * Vector(1, 0, 1), Position Of(Event Player) * Vector(1, 0,
			1));
		"vert distance"
		Event Player.O = Y Component Of(Position Of(Event Player)) - Y Component Of(Event Player.Destination);
		"Formula from https://youtu.be/bqYtNrhdDAY?t=818"
		Event Player.P = (Arccosine In Degrees((9.800 * Event Player.ScopedThrow * Event Player.ScopedThrow / 900 - Event Player.O)
			/ Distance Between(Event Player.Destination, Position Of(Event Player))) + Arctangent In Degrees(Event Player.ScopedThrow,
			Event Player.O)) / -2;
		"Set player looking at proper throw angle. If they're already at that angle, set them facing at alternate throw angle"
		If(Angle Between Vectors(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(
			Direction Towards(Position Of(Event Player), Event Player.Destination)), Event Player.P)) < 0.100);
			"Formula from https://youtu.be/bqYtNrhdDAY?t=818"
			Event Player.P = (-1 * Arccosine In Degrees((9.800 * Event Player.ScopedThrow * Event Player.ScopedThrow / 900 - Event Player.O)
				/ Distance Between(Event Player.Destination, Position Of(Event Player))) + Arctangent In Degrees(Event Player.ScopedThrow,
				Event Player.O)) / -2;
		End;
		Set Facing(Event Player, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Position Of(Event Player),
			Event Player.Destination)), Event Player.P), To World);
	}
}

disabled rule("Subroutines")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Sub0 - RespawnPlayer")
{
	event
	{
		Subroutine;
		RespawnPlayer;
	}

	actions
	{
		Stop Camera(Event Player);
		Teleport(Event Player, Global.CPLocation[Event Player.CP]);
		Start Forcing Player Position(Event Player, Global.CPLocation[Event Player.CP], True);
		If(Magnitude Of(Global.CPFacing[Event Player.CP]) > 2);
			"Horiz/Vertical angle facing direction format "
			Set Facing(Event Player, Direction From Angles(X Component Of(Global.CPFacing[Event Player.CP]), Y Component Of(
				Global.CPFacing[Event Player.CP])), To World);
		Else;
			"Vector facing direction format "
			Set Facing(Event Player, Global.CPFacing[Event Player.CP], To World);
		End;
		If(Is Firing Secondary(Event Player) != Global.CPScoped[Event Player.CP]);
			Press Button(Event Player, Button(Secondary Fire));
		End;
		Wait(0.100, Ignore Condition);
		Stop Forcing Player Position(Event Player);
	}
}

disabled rule("Pioneer Mode Stuff")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Interact + Hello - Toggle Dev Mode [HOST ONLY]")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Communicating(Event Player, Hello) == True;
	}

	actions
	{
		Global.DevModeEngaged = !Global.DevModeEngaged;
		Wait(0.100, Ignore Condition);
		Small Message(Event Player, Global.DevModeEngaged ? Custom String("Dev Mode Engaged") : Custom String("Dev Mode Disengaged"));
	}
}

rule("Need Healing + Dev Mode On - Toggle Pioneer Mode [HOST ONLY]")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DevModeEngaged == True;
		Is Communicating(Host Player, Need Healing) == True;
	}

	actions
	{
		Global.PioneerMode = !Global.PioneerMode;
		Wait(0.100, Ignore Condition);
		Small Message(Host Player, Global.PioneerMode ? Custom String("Pioneer Mode Engaged") : Custom String("Pioneer Mode Disengaged"));
	}
}

rule("Emote + Melee + Dev Mode On - Delete Last CP [HOST ONLY]")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DevModeEngaged == True;
		Is Communicating Any Emote(Host Player) == True;
		Is Button Held(Host Player, Button(Melee)) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Deleting last CP"));
		Modify Global Variable(CPLocation, Remove From Array By Index, Count Of(Global.CPLocation) - 1);
		Modify Global Variable(CPDestination, Remove From Array By Index, Count Of(Global.CPDestination) - 1);
		Modify Global Variable(CPFacing, Remove From Array By Index, Count Of(Global.CPFacing) - 1);
		Modify Global Variable(CPHintText, Remove From Array By Index, Count Of(Global.CPHintText) - 1);
		Modify Global Variable(CPHintEffectPosition, Remove From Array By Index, Count Of(Global.CPHintEffectPosition) - 1);
		Modify Global Variable(CPScoped, Remove From Array By Index, Count Of(Global.CPScoped) - 1);
		Modify Global Variable(CPObjectiveText, Remove From Array By Index, Count Of(Global.CPObjectiveText) - 1);
		Enable Inspector Recording;
		Log To Inspector(Custom String("Remove last CP"));
		Disable Inspector Recording;
	}
}

rule("Group Up + Dev Mode On - Set Hint Orb located at ray cast")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DevModeEngaged == True;
		Is Communicating(Host Player, Group Up) == True;
	}

	actions
	{
		Global.CPHintEffectPosition[Host Player.CP] = Ray Cast Hit Position(Eye Position(Host Player), Eye Position(Host Player)
			+ 80 * Facing Direction Of(Host Player), Null, Null, False);
		Small Message(Host Player, Custom String("Hint orb position updated to ray cast location"));
		Enable Inspector Recording;
		Log To Inspector(Custom String("Update Hint Orb Position on CP {0}", Host Player.CP));
		Disable Inspector Recording;
	}
}

rule("Check scoped throw")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		disabled Is Firing Secondary(Event Player) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Global.PioneerMode == True;
	}

	actions
	{
		If(Is Firing Secondary(Event Player));
			Small Message(Event Player, Custom String("Scoped throw"));
			Event Player.ScopedThrow = True;
		Else;
			Small Message(Event Player, Custom String("Unscoped throw"));
			Event Player.ScopedThrow = False;
		End;
	}
}

disabled rule("Map Data")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Eichenwalde Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Map == Map(Eichenwalde);
	}

	actions
	{
		Global.CPLocation = Array(Vector(26.200, 5.350, -67.080), Vector(-3.340, 2.290, -22.710), Vector(22.540, 3.520, -23.920), Vector(
			-13.190, 2.550, -31.750), Vector(-13.190, 2.550, -31.750), Vector(18.149, 4.870, -43.419), Vector(21.913, 5.320, -66.216),
			Vector(27.826, 5, -45.516), Vector(22.810, 5, -52.176), Vector(-2.100, 3.700, -80.440), Vector(88.287, 12.770, -101.982),
			Vector(94.380, 13.780, -67.391), Vector(98.544, 10.750, -27.622), Vector(100.590, 10.870, -43.579), Vector(96.215, 10.839,
			-46.924));
		Global.CPDestination = Array(Vector(-11.940, 0, -9.960), Vector(22, 5.440, -61.400), Vector(20.780, 5.790, -63.470), Vector(17.070,
			5.460, -48.340), Vector(10.970, 10.470, -40.660), Vector(16.530, 6.800, -76.050), Vector(51.210, 22.520, -64.860), Vector(
			54.450, 18.890, -78.470), Vector(54.460, 18.310, -102.480), Vector(81.100, 13.180, -73.580), Vector(16.700, 6.460, -75.120),
			Vector(-5.150, 3.920, -84.340), Vector(79.190, 12.930, -98.030), Vector(87.361, 13.344, -69.562), Vector(121.135, 9.362,
			-35.050));
		Global.CPFacing = Array(Vector(-0.217, 0.920, 0.326), Vector(0.144, 0.960, -0.220), Vector(-0.010, 0.970, -0.220), Vector(0.176,
			0.980, -0.093), Vector(0.133, 0.990, -0.047), Vector(-0.011, 0.980, -0.199), Vector(0.178, 0.984, 0.010), Vector(0.170, 0.970,
			-0.200), Vector(0.203, 0.920, -0.335), Vector(0.624, 0.780, 0.050), Vector(-0.426, 0.890, 0.162), Vector(-0.810, 0.570,
			-0.140), Vector(-0.229, 0.460, -0.858), Vector(-153.018, -80.678, 0), Vector(64.523, -81.387, 0));
		Global.CPHintText = Array(Custom String("Align top-right corner of triangle scope with tower corner"), Custom String(
			"Aim for the metal bracket on the post in front of you"), Custom String("Aim for the tip of the tree leaf directly above"),
			Custom String(
			"Scope, then put the center of your ultimate meter \r\nwhere the post intersects the roof (over the green sphere)"),
			Custom String("Scope, then put the center of your ultimate meter \r\non the corner of the roof (over the green sphere)"),
			Custom String("Aim at the corner of the roof above"), Custom String(
			"Put your crossheir on the corner with the green sphere\r\nthen move slightly to the right"), Custom String(
			"Scope, then align bottom left \"wick\" with the tower corner"), Custom String(
			"Scope, then put crossheir touching the branch tip. \r\nOr put the left side of your ultimate meter on tower spire"),
			Custom String("Put your crossheir on the flat part of stone pillar, then jump and throw"), Custom String(
			"When walking out of spawn, aim at approx this height"), Custom String("Aim slightly above the left side of the tree"),
			Custom String("Stand on carpet corner, aim for center of archway stone"), Custom String(""), Custom String(
			"Stand on the dark stone, look through the ceiling window"));
		Global.CPHintEffectPosition = Array(Vector(17.640, 36.060, -57.940), 0, 0, Vector(-10.680, 11.080, -33.100), Vector(-10.810,
			11.330, -32.620), 0, Vector(22.720, 10.950, -66.240), Vector(31.780, 23.250, -52.730), 0, 0, 0, 0, 0, 0, 0);
		Global.CPScoped = Array(True, False, True, True, True, False, True, True, True, False, False, False, False, False, False);
		Global.CPObjectiveText = Array(Custom String("Hit Enemy Team Coming Out of Spawn At Beginning of Round"), Custom String(
			"Hit a big anti on enemy team to initiate near 1st point"), Custom String(
			"Hit a big anti on enemy team to initiate near 1st point"), Custom String(
			"Anti their tanks if they're playing close to the bridge"), Custom String("Anti people being annoying on the bridge"),
			Custom String("Hit a big anti on enemy team on point"), Custom String("Anti people on the top of the castle"), Custom String(
			"Hit enemies on top of the castle"), Custom String("Another Anti-Sniper Spot"), Custom String(
			"Throw nade to end of 2nd point when respawning"), Custom String("Throw nade from spawn to 1st point"), Custom String(
			"Hit enemies coming out of attack spawn"), Custom String("Throw nade from spawn to middle 2nd point"), Custom String(
			"Walk out of spawn and save the game with a hero nade"), Custom String(
			"Another weird out of map nade to hit tanks on 3rd point"));
	}
}

rule("Route66 Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Map == Map(Route 66);
	}

	actions
	{
		Global.CPLocation = Array(Vector(33.305, 0.226, 41.559), Vector(33.305, 0.226, 41.559), Vector(72.356, 0.202, 13.194), Vector(
			53.665, 2.445, -8.287), Vector(13.301, 8.466, -21.098), Vector(18.339, 8.316, -19.950), Vector(-23.848, 3.310, -31.965),
			Vector(-43.073, 3.308, -23.527));
		Global.CPDestination = Array(Vector(36.223, 8.773, -2.424), Vector(47.454, 2.925, 4.794), Vector(35.207, 8.501, -2.781), Vector(
			43.724, 3.246, 60.687), Vector(-27.141, 8.978, -29.114), Vector(-49.130, 4.188, -9.433), Vector(17.349, 2.869, 0.845), Vector(
			3.046, 8.994, -44.273));
		Global.CPFacing = Array(Vector(176.204, -74.921, 0), Vector(158.950, -77.184, 0), Vector(-113.269, -76.311, 0), Vector(-8.201,
			-65.418, 0), Vector(-101.212, -76.723, 0), Vector(-81.140, -66.995, 0), Vector(51.465, -72.702, 0), Vector(114.219, -21.198,
			0));
		Global.CPHintEffectPosition = Array(0, Vector(38.699, 30.267, 39.739), 0, 0, 0, 0, 0, 0);
		Global.CPScoped = Array(False, True, False, True, True, True, False, False);
		Global.CPObjectiveText = Array(Custom String("Nade enemy team on top of gas station"), Custom String(
			"Nade enemy tanks holding 1st choke"), Custom String("Nade enemies on top of gas station"), Custom String(
			"Nade enemy team coming out of spawn"), Custom String("Hit enemies on the common stairs location"), Custom String(
			"Throw nade from spawn to end of 2nd point"), Custom String("Throw nade when walking from spawn to 1st point"), Custom String(
			"Hit enemies in the cave"));
		Global.CPHintText = Array(Custom String("Align top left of triangle crossheir on corner of metal piece"), Custom String(
			"Align upper right \"wick\" of scope with the orb at end of metal piece"), Custom String(
			"Put ult meter in middle of open space between branches"), Null, Custom String(
			"Walk into the corner, then aim for the top of the wood branch"), Custom String(
			"Put ult meter on top of corner of rock next to tree"), Custom String(
			"When you walk under bridge, put your ultmate meter between the rocks above"), Custom String(
			"Walk on bottom of stair railing, look at top of railing, jump and throw"));
	}
}

rule("Temple of Anubis Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Map == Map(Temple of Anubis);
	}

	actions
	{
		Global.CPLocation = Array(Vector(7.882, -2.004, 2.464), Vector(2.284, 0.262, -19.396), Vector(-25.705, 4.509, 30.861), Vector(
			-47.671, 1.513, 35.016), Vector(-47.653, 1.513, 34.987), Vector(-16.535, 1.543, 71.018), Vector(-14.030, 4.663, 106.280));
		Global.CPDestination = Array(Vector(-22.202, 5.454, 32.073), Vector(-42.664, 2.295, 42.229), Vector(2.629, 1.185, -19.289), Vector(
			-3.051, 5.103, 108.704), Vector(-23.171, 7.207, 118.364), Vector(-8.770, 5.174, 111.224), Vector(-9.598, 4.558, 75.797));
		Global.CPFacing = Array(Vector(-45.456, -75.740, 0), Vector(-36.107, -61.683, 0), Vector(150.535, -71.180, 0), Vector(31.196,
			-53.399, 0), Vector(16.364, -49.010, 0), Vector(10.931, -76.558, 0), Vector(171.727, -80.277, 0));
		Global.CPHintText = Array(Custom String("Align your ultimate meter with the upper corner of wall"), Custom String(
			"Align your ultimate meter with the building in background"), Custom String(
			"Scope then center your ult meter on top of the spire"), Custom String(
			"Aim for the top of the spire (pretty sensitive to start pos)"), Custom String(
			"Aim slightly to the left of the top of the pyramid"), Custom String(
			"Align the bottom right wick of your crossheir with the\r\ncorner where the orb is"), Custom String(""));
		Global.CPHintEffectPosition = Array(Vector(-29.206, 60.167, 38.701), 0, 0, 0, 0, Vector(-17.702, 75.597, 104.158), 0);
		Global.CPScoped = Array(False, False, True, False, False, True, False);
		Global.CPObjectiveText = Array(Custom String("Anti their whole team to start the round :D"), Custom String(
			"Throw nade to 1st point when returning from spawn"), Custom String("Anti their whole team to start the round :D"),
			Custom String("Throw nade to 2nd point after respawning"), Custom String("Hit their supports on 2nd point after respawning"),
			Custom String("Hit their tanks on 2nd point"), Custom String("Hit their team coming under bridge"));
	}
}

rule("Hanamura Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Hanamura), Map(Hanamura Winter)), Current Map) == True;
	}

	actions
	{
		Global.CPLocation = Array(Vector(29.116, 0.200, 12.736), Vector(33.699, 0.250, 14.862), Vector(0.631, 0, -16.893), Vector(13.398,
			0, -23.642), Vector(16.107, 4.153, -73.688));
		Global.CPDestination = Array(Vector(26.200, 0.900, 0.960), Vector(-4.420, 1.710, -18.650), Vector(72.750, -1.300, 0.700), Vector(
			-9, -0.500, -84), Vector(15.154, 0.478, 9.849));
		Global.CPFacing = Array(Vector(-166.400, -86.210, 0), Vector(-131.320, -73.210, 0), Vector(76.280, -63.690, 0), Vector(-159.710,
			-20.320, 0), Vector(-0.654, -27.378, 0));
		Global.CPHintText = Array(Custom String("Scope, then align your crossheir against the wall near vertical"), Custom String(
			"Scope, then align right side of crossheir where the 2 wood pieces intersect"), Custom String(
			"Scope, then align the white part on the right with the top of roof corner"), Custom String(
			"When walking under the gate, aim for the top of the tree in center"), Custom String(
			"Throw nade to enemy spawn after winning teamfight"));
		Global.CPHintEffectPosition = Array(0, 0, 0, 0, 0);
		Global.CPScoped = Array(True, True, True, False, False);
		Global.CPObjectiveText = Array(Custom String("Anti their tanks at choke"), Custom String("Anti their supports"), Custom String(
			"Anti their team coming out of spawn"), Custom String("Nade the point when walking back to the fight from spawn"),
			Custom String("Aim below roof corner"));
		Global.DevModeEngaged = True;
		Global.PioneerMode = False;
	}
}

rule("Dorado Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Map == Map(Dorado);
	}

	actions
	{
		Global.CPLocation = Array(Vector(5.341, 0, 12.674), Vector(28.179, 1, 10.147), Vector(46.950, 6.810, -35.250), Vector(84.500,
			9.200, -24.687), Vector(104.254, 9, -20.376), Vector(128.270, 11, 15.204), Vector(169.118, 11, 29.089));
		Global.CPDestination = Array(Vector(28.600, 12, -26.500), Vector(50, 7.500, -19), Vector(-2.340, 0, 5.640), Vector(107.600, 18.600,
			-3.300), Vector(125, 12, 21.600), Vector(116.800, 8.550, -2.650), Vector(178, 12.740, 56.030));
		"Using X = horizontal angle, Y = Vertical Angle"
		Global.CPFacing = Array(Vector(149.240, -73.930, 0), Vector(143.110, -77.960, 0), Vector(-51.070, -69.440, 0), Vector(47.270,
			-79.430, 0), Vector(26.460, -74.490, 0), Vector(-147.410, -83.320, 0), Vector(18.370, -80.970, 0));
		Global.CPObjectiveText = Array(Custom String("Anti their team at start of round"), Custom String(
			"Anti their team holding the choke under bridge"), Custom String("Anti their team at start of round"), Custom String(
			"Hit enemies on close high ground"), Custom String("Hit their tanks holding the bridge"), Custom String(
			"Hit their tanks holding the bridge"), Custom String("Hit their tanks holding the bridge"));
		Global.CPHintText = Array(Custom String("Scope, then align the white part of crossheir on right with building corner"),
			Custom String("Align the center of your ultimate meter with the corner \r\nof building under roof (where the orb is)"),
			Custom String("Go into corner, aim at roof corner above"), Custom String("Look up at the roof corner"), Custom String(
			"Look up at the cylinder (electrical thing)"), Custom String("Look right above corner of metal"), Custom String(
			"Look up at center of roof panel where it changes color"));
		Global.CPHintEffectPosition = Array(Vector(8.160, 11.400, 10.630), Vector(32.500, 11.500, 4.600), Null, Null, Null, Null, Null,
			Null);
		Global.CPScoped = Array(True, False, True, False, False, True, True);
	}
}

rule("Hollywood Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Hollywood), Map(Hollywood Halloween)), Current Map) == True;
	}

	actions
	{
		Global.CPLocation = Array(Vector(7.821, 2, 30.474), Vector(-31.396, 0.800, 19.828), Vector(-15.704, 1.750, -4.276), Vector(-31.441,
			1.750, -8.973), Vector(-44.155, -0.250, -6.348), Vector(25.845, 1.720, -30.776), Vector(2.642, 1.749, -10.856), Vector(-6.396,
			1.604, -40.341), Vector(12.549, 1.604, -51.243));
		Global.CPDestination = Array(Vector(-18, 2.300, 5.300), Vector(-11.700, 1.720, 70), Vector(3.570, 11.400, -30.700), Vector(11.190,
			2.200, -77.500), Vector(-5.700, 2.600, -20), Vector(-26.370, 3.700, -2.300), Vector(1.999, 11.913, -59.743), Vector(27.310,
			7.585, -74.020), Vector(7.975, 2.264, -76.787));
		Global.CPFacing = Array(Vector(-134.100, -78.500, 0), Vector(21.470, -72.100, 0), Vector(143.670, -79.100, 0), Vector(148.120,
			-59.570, 0), Vector(109.780, -76.670, 0), Vector(-61.400, -69.870, 0), Vector(-179.247, -72.828, 0), Vector(134.978, -73.856,
			0), Vector(-169.849, -81.821, 0));
		Global.CPHintText = Array(Custom String("Scope, then align right white part of crossheir with top of wooden part of tree"),
			Custom String("Scope then center your ult meter where the roofs meet"), Custom String("Look 2 tiles up from corner of roofs"),
			Custom String("Press R, its pretty obvious"), 0, Custom String("Aim at top of box, above center of left wood panel"),
			Custom String(""), Custom String(""), Custom String(""));
		Global.CPHintEffectPosition = Array(0, Vector(-25, 18.720, 34.320), 0, 0, Vector(-32.790, 30.695, -13.586), 0, 0, 0, 0);
		Global.CPScoped = Array(True, False, False, False, True, False, True, False, False);
		Global.CPObjectiveText = Array(Custom String("Anti their tanks holding the point"), Custom String(
			"Hit their team coming out of spawn"), Custom String("Hit enemies on top right building"), Custom String(
			"Throw nade coming back to fight on 2nd point"), Custom String("Hit enemy tanks"), Custom String(
			"Throw nade to 1st point when returning to fight"), Custom String(""), Custom String(""), Custom String(""));
	}
}

rule("Blz World Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Blizzard World), Map(Black Forest Winter)), Current Map) == True;
	}

	actions
	{
		Global.CPLocation = Array(Vector(-5.505, -1, 5.647), Vector(11.922, 0, 46.034), Vector(3.103, 8, 81.280), Vector(-72.023, 0.800,
			98.577), Vector(-1.770, 2, 81.395), Vector(-29.846, 2.001, 81.351), Vector(-29.846, 2.001, 81.351));
		Global.CPDestination = Array(Vector(-6, 6.700, 52), Vector(8.500, 2.700, 71), Vector(2.600, -3.300, -18.360), Vector(1.150, 2.600,
			75.330), Vector(-38.176, 0.273, 75.185), Vector(-62.436, 0.454, 89.654), Vector(-59.725, 0.499, 108.192));
		Global.CPFacing = Array(Vector(-0.790, -73.970, 0), Vector(-7.820, -81.970, 0), Vector(-179.770, -53, 0), Vector(107.640, -61.640,
			0), Vector(-99.679, -78.349, 0), Vector(-75.707, -79.431, 0), Vector(-48.065, -77.245, 0));
		Global.CPHintText = Array(Custom String("Put ultimate meter on the top of the bird statue"), Custom String(
			"Scope, then put bottom of blue rows of crossheir on top wooden beam"), Custom String(
			"Stand in middle of boat, then center ult meter on top archway roof"), Custom String(
			"Look above pylon at same angle as the sun"), Custom String(""), Custom String(""), Custom String(""));
		Global.CPHintEffectPosition = Array(Vector(-5.774, 12.816, 17.028), 0, 0, 0, Vector(-32.645, 77.028, 83.307), 0, 0);
		Global.CPScoped = Array(False, True, False, False, True, True, True);
		Global.CPObjectiveText = Array(Custom String("Hit enemies on the platform overlooking route to 1st point"), Custom String(
			"Anti their tanks on point"), Custom String("Anti their whole team to start the round :D"), Custom String(
			"Throw nade to 1st point while returning from spawn"), Custom String(""), Custom String(""), Custom String(""));
	}
}

rule("Kings Row Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(King's Row), Map(King's Row Winter)), Current Map) == True;
	}

	actions
	{
		Global.CPLocation = Array(Vector(-8.677, 0.072, -10.312), Vector(-20.647, 0, -2.427), Vector(9.119, 0.065, -21.753), Vector(9.119,
			0.065, -21.753), Vector(-7.571, 0.022, -25.400), Vector(-49.184, 0.163, -38.250), Vector(-20.939, 0.118, -40.889), Vector(
			0.104, 0.031, -22.647), Vector(-83.084, 0.730, -20.321));
		Global.CPDestination = Array(Vector(-15.829, 0.595, -28.464), Vector(3.700, 7, -37.600), Vector(-28.017, 0.580, -23.816), Vector(
			-31.773, 9.750, -34.063), Vector(-60.923, 0.485, -32.162), Vector(-89.112, 1.383, -20.409), Vector(-3.845, 0.972, 16.273),
			Vector(-25.744, 0.691, -24.941), Vector(-15.075, 0.384, -32.519));
		Global.CPFacing = Array(Vector(-158.494, -83.892, 0), Vector(145.260, -75.570, 0), Vector(-93.181, -78.107, 0), Vector(-106.754,
			-75.317, 0), Vector(-97.224, -72.175, 0), Vector(-65.923, -75.784, 0), Vector(16.650, -69.802, 0), Vector(-95.070, -81.821, 0),
			Vector(100.267, -65.045, 0));
		Global.CPHintText = Array(Custom String("Scope and put triangle crossheir above dark section of wall"), Custom String(
			"Put crossheir wick on building corner with orb"), Custom String("Look at corner above"), Custom String(
			"Scope, align upper right triangle crossheir with corner, \r\nthen move up slightly"), Custom String(
			"Align lower left triangle crossheir corner with corner between 2 roofs"), Custom String(
			"Scope, align upper left triangle crossheir with smallest metal piece"), Custom String(
			"Align triangle crossheir with metal piece"), Custom String(""), Custom String(""));
		Global.CPHintEffectPosition = Array(0, Vector(-15.236, 16.952, -7.540), 0, 0, 0, 0, 0, 0, 0);
		Global.CPScoped = Array(True, True, False, True, True, True, True, False, False);
		Global.CPObjectiveText = Array(Custom String("Anti Their Tanks On 1st Point"), Custom String(
			"Hit DPS on the perch above 1st point"), Custom String("Hit enemy team behind 1st point"), Custom String(
			"Hit the Widow Players"), Custom String("Hit tanks in common position"), Custom String("Hit tanks in common position"),
			Custom String("Hit enemy team coming out of spawn"), Custom String(""), Custom String(""));
	}
}

rule("Nepal Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Map == Map(Nepal);
	}

	actions
	{
		Global.CPLocation = Array(Vector(-154.389, -87.481, -29.787), Vector(-154.389, -87.481, -29.787), Vector(-155.818, -97.367,
			65.226), Vector(-42.670, 18.225, 85.840), Vector(105.418, 132, 29.244));
		Global.CPDestination = Array(Vector(-156.741, -87.837, 14.774), Vector(-172.646, -87.403, -0.101), Vector(-156.309, -87.462,
			-17.357), Vector(-50.833, 13.429, 2.712), Vector(67.240, 130.131, -15.092));
		Global.CPFacing = Array(Vector(-3.021, -75.646, 0), Vector(-31.591, -78.926, 0), Vector(-179.659, -49.515, 0), Vector(-174.391,
			-26.235, 0), Vector(-139.268, -16.304, 0));
		Global.CPHintText = Array(Custom String("Look at roof edge about 1/4 to the left between the 2 wood pieces"), Custom String(
			"Put center ult meter where the wood piece intersects the wall"), Custom String("Put center of ult meter on the rock corner"),
			Custom String("Look above center spire, about 1/2 way up towards ship roof"), Custom String(""));
		Global.CPHintEffectPosition = Array(0, Vector(-155.594, -80.245, -27.752), Vector(-155.894, -87.320, 45.030), 0, 0);
		Global.CPScoped = Array(False, True, False, False, False);
		Global.CPObjectiveText = Array(Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""));
	}
}

rule("Junkertown Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Map == Map(Junkertown);
	}

	actions
	{
		Global.CPLocation = Array(Vector(28.399, 9.188, -70.647), Vector(42.305, 10, -76.186), Vector(-27.488, 4.771, -59.786), Vector(
			-42.163, 12.500, -57.381), Vector(-37.361, 12.450, -59.264), Vector(-45.779, 4.315, -14.816), Vector(-35.533, 4.610, -71.484),
			Vector(-63.832, 12.431, -96.370), Vector(-40.407, 7.431, -116.841), Vector(17.300, 7.314, -70.788));
		Global.CPDestination = Array(Vector(-0.065, 11.769, -57.915), Vector(-31.958, 5.116, -48.897), Vector(41.595, 10.722, -76.164),
			Vector(-19.110, 14.440, -93.990), Vector(-23.300, 14.380, -103.600), Vector(-24.635, 7.045, -90.489), Vector(-40.899, 14.212,
			-118.270), Vector(-87.424, 6.217, -114.528), Vector(-0.476, 7.257, -46.681), Vector(1.486, 7.667, -47.671));
		Global.CPFacing = Array(Vector(-65.901, -79.997, 0), Vector(-69.824, -62.078, 0), Vector(103.337, -63.457, 0), Vector(147.800,
			-76.070, 0), Vector(161.620, -74.320, 0), Vector(164.388, -60.062, 0), Vector(-173.458, -73.625, 0), Vector(-127.584, -80.920,
			0), Vector(29.647, -59.766, 0), Vector(-34.376, -81.167, 0));
		Global.CPHintText = Array(Custom String("Walk into the pillar, aim slightly above top of pillar"), Custom String(
			"Aim at same height as roof corner, and throw to end of 1st point"), Custom String("Put ult meter on building corner"),
			Custom String("Go into corner, Aim for horn ridge, then walk forward and throw"), Custom String(
			"Go into corner, scope, aim for corner where paint \r\nchanges color, then walk slightly left and throw"), Custom String(
			"Align with the iron beam above and on left then throw"), Custom String("Put ult meter on the corner"), Custom String(
			"Scope, put ult meter on the pipe. If you hit this in game let me know lol"), Custom String(
			"Put bottom of ult meter on top of the spire"), Custom String(""));
		Global.CPHintEffectPosition = Array(0, Vector(38.446, 19.804, -73.269), Vector(-16.733, 14.526, -62.375), 0, 0, 0, 0, 0, 0);
		Global.CPScoped = Array(True, False, False, True, False, False, False, True, False, False);
		Global.CPObjectiveText = Array(Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""),
			Custom String(""), Custom String(""), Custom String(""), Custom String(""));
		Global.DevModeEngaged = True;
		Global.PioneerMode = False;
	}
}

rule("Volskaya Industries Map Data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Map == Map(Volskaya Industries);
	}

	actions
	{
		Global.CPLocation = Array(Vector(-31.288, -4.707, 25.085), Vector(-31.288, -4.705, 25.085), Vector(-19.923, -3.567, 41.842),
			Vector(-21.750, -3.295, 71.801), Vector(-13.639, -3.245, 44.959), Vector(-48.130, -3.980, 59.459), Vector(12.343, -4.249,
			46.821), Vector(11.450, -1.979, 76.969), Vector(-96.739, -1.980, 39.302), Vector(-114.508, -2.200, 45.434), Vector(-114.508,
			-2.200, 45.434));
		Global.CPDestination = Array(Vector(-15.662, -2.580, 61.888), Vector(-12.372, 1.956, 76.839), Vector(-22.890, -2.499, 78.427),
			Vector(-0.812, -5.191, 14.906), Vector(1.891, 2.599, 89.040), Vector(-104.289, 2.204, 45.820), Vector(-21.573, -2.334, 77.924),
			Vector(-69.350, 3.001, 52.170), Vector(-69.841, 3.083, 51.882), Vector(-69.883, 3.287, 52.053), Vector(-77.183, -1.256,
			57.895));
		Global.CPFacing = Array(Vector(23.005, -77.025, 0), Vector(20.078, -70.796, 0), Vector(-4.636, -78.234, 0), Vector(159.796,
			-69.813, 0), Vector(19.407, -74.218, 0), Vector(-103.651, -25.142, 0), Vector(-47.477, -74.899, 0), Vector(-107.062, -38.502,
			0), Vector(64.935, -80.349, 0), Vector(81.563, -74.866, 0), Vector(71.537, -76.053, 0));
		Global.CPHintText = Array(Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""),
			Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""));
		Global.CPHintEffectPosition = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		Global.CPScoped = Array(True, True, False, True, False, True, True, False, False, True, False);
		Global.CPObjectiveText = Array(Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""),
			Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""));
		Global.DevModeEngaged = True;
		Global.PioneerMode = False;
	}
}