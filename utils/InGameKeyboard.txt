settings
{
	main
	{
		Description: "In Game Keyboard Demo! Press Interact to open the keyboard, use left click to type, click \"Done\" to enter text! Version Control: https://github.com/WelkinU/OverwatchWorkshopScripts/tree/master/utils"
	}

	modes
	{
		Assault
		{
			Limit Roles: 2 Of Each Role Per Team

			enabled maps
			{
				Hanamura
				Temple of Anubis
			}
		}

		Control
		{
			Limit Roles: 2 Of Each Role Per Team

			disabled maps
			{
				Lijiang Tower
				Lijiang Tower Lunar New Year
				Oasis
			}
		}

		Escort
		{
			Limit Roles: 2 Of Each Role Per Team

			enabled maps
			{
				Havana
				Rialto
			}
		}

		Hybrid
		{
			Limit Roles: 2 Of Each Role Per Team

			enabled maps
			{
				Blizzard World
				Eichenwalde
				Hollywood
				Numbani
			}
		}
	}
}

variables
{
	global:
		0: KeyboardLayout

	player:
		19: KeyboardFullTextExtry
		20: KeyboardKeyTempIndex
		21: TempIterator
		22: KeyboardWorldPositionSave
		23: KeyboardTextIDSave
		24: ColIterator
		25: RowIterator
}

rule("Keyboard Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.KeyboardLayout = Empty Array;
		Global.KeyboardLayout[0] = Array(Custom String("0"), Custom String("1"), Custom String("2"), Custom String("3"), Custom String(
			"4"), Custom String("5"), Custom String("6"), Custom String("7"), Custom String("8"), Custom String("9"));
		Global.KeyboardLayout[1] = Array(Custom String("Q"), Custom String("W"), Custom String("E"), Custom String("R"), Custom String(
			"T"), Custom String("Y"), Custom String("U"), Custom String("I"), Custom String("O"), Custom String("P"));
		Global.KeyboardLayout[2] = Array(Custom String("A"), Custom String("S"), Custom String("D"), Custom String("F"), Custom String(
			"G"), Custom String("H"), Custom String("J"), Custom String("K"), Custom String("L"), Custom String("DONE"));
		Global.KeyboardLayout[3] = Array(Custom String("Z"), Custom String("X"), Custom String("E"), Custom String("C"), Custom String(
			"V"), Custom String("B"), Custom String("N"), Custom String("M"), Custom String("RESET"));
		Global.KeyboardLayout[4] = Array(Custom String("SPACE"));
	}
}

rule("Init Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.KeyboardTextIDSave = Empty Array;
		Event Player.KeyboardFullTextExtry = Custom String("");
		Create HUD Text(Filtered Array(Event Player, Event Player.KeyboardFullTextExtry != Custom String("")), Custom String(
			"Entered: {0}", Event Player.KeyboardFullTextExtry), Null, Null, Top, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
	}
}

rule("Interact to show keyboard")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.KeyboardTextIDSave == Empty Array;
	}

	actions
	{
		Event Player.KeyboardWorldPositionSave = Empty Array;
		For Player Variable(Event Player, RowIterator, 0, Count Of(Global.KeyboardLayout), 1);
			For Player Variable(Event Player, ColIterator, 0, Count Of(Global.KeyboardLayout[Event Player.RowIterator]), 1);
				Modify Player Variable(Event Player, KeyboardWorldPositionSave, Append To Array, Eye Position(Event Player) + Vector(0, 0, 0)
					+ World Vector Of(Vector((Event Player.ColIterator * 2 - Count Of(Global.KeyboardLayout[Event Player.RowIterator])) / -4, (
					1 - Event Player.RowIterator) / 2, 3), Event Player, Rotation));
			End;
		End;
		Event Player.TempIterator = 0;
		For Player Variable(Event Player, RowIterator, 0, Count Of(Global.KeyboardLayout), 1);
			For Player Variable(Event Player, ColIterator, 0, Count Of(Global.KeyboardLayout[Event Player.RowIterator]), 1);
				Create In-World Text(Event Player, Global.KeyboardLayout[Event Player.RowIterator][Event Player.ColIterator],
					Event Player.KeyboardWorldPositionSave[Event Player.TempIterator] + World Vector Of(Vector(0, -0.250, 0), Event Player,
					Rotation), 2, Do Not Clip, Visible To, Color(Purple), Default Visibility);
				Modify Player Variable(Event Player, KeyboardTextIDSave, Append To Array, Last Text ID);
				Wait(0.016, Ignore Condition);
				Event Player.TempIterator += 1;
			End;
		End;
	}
}

rule("R to remove keyboard")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		For Player Variable(Event Player, RowIterator, 0, Count Of(Event Player.KeyboardTextIDSave), 1);
			Destroy In-World Text(Event Player.KeyboardTextIDSave[Event Player.RowIterator]);
		End;
		Event Player.KeyboardTextIDSave = Empty Array;
	}
}

rule("Left Click To Click Letters")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Count Of(Event Player.KeyboardTextIDSave) > 0;
	}

	actions
	{
		"Get the index of the position of the letter clicked on"
		Event Player.KeyboardKeyTempIndex = Index Of Array Value(Event Player.KeyboardWorldPositionSave, First Of(Sorted Array(
			Event Player.KeyboardWorldPositionSave, Angle Between Vectors(Direction Towards(Eye Position(Event Player),
			Current Array Element), Facing Direction Of(Event Player)))));
		Event Player.TempIterator = 0;
		For Player Variable(Event Player, RowIterator, 0, Count Of(Global.KeyboardLayout), 1);
			For Player Variable(Event Player, ColIterator, 0, Count Of(Global.KeyboardLayout[Event Player.RowIterator]), 1);
				If(Event Player.TempIterator == Event Player.KeyboardKeyTempIndex);
					Break;
				End;
				Event Player.TempIterator += 1;
			End;
			If(Event Player.TempIterator == Event Player.KeyboardKeyTempIndex);
				Break;
			End;
		End;
		If(Event Player.ColIterator >= Count Of(Global.KeyboardLayout[Event Player.RowIterator]));
			Event Player.RowIterator += 1;
			Event Player.ColIterator = 0;
		End;
		If(Global.KeyboardLayout[Event Player.RowIterator][Event Player.ColIterator] == Custom String("DONE"));
			Small Message(Event Player, Custom String("Entered: {0}", Event Player.KeyboardFullTextExtry));
			For Player Variable(Event Player, RowIterator, 0, Count Of(Event Player.KeyboardTextIDSave), 1);
				Destroy In-World Text(Event Player.KeyboardTextIDSave[Event Player.RowIterator]);
			End;
			Wait(0.100, Ignore Condition);
			Event Player.KeyboardFullTextExtry = Custom String("");
			Event Player.KeyboardTextIDSave = Empty Array;
		Else If(Global.KeyboardLayout[Event Player.RowIterator][Event Player.ColIterator] == Custom String("RESET"));
			Event Player.KeyboardFullTextExtry = Custom String("");
		Else If(Global.KeyboardLayout[Event Player.RowIterator][Event Player.ColIterator] == Custom String("SPACE"));
			Event Player.KeyboardFullTextExtry = Custom String("{0} ", Event Player.KeyboardFullTextExtry);
		Else;
			Event Player.KeyboardFullTextExtry = Custom String("{0}{1}", Event Player.KeyboardFullTextExtry,
				Global.KeyboardLayout[Event Player.RowIterator][Event Player.ColIterator]);
		End;
	}
}